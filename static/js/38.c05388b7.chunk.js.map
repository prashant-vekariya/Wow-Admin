{"version":3,"sources":["views/Setting/index.js","@core/components/input-password-toggle/index.js"],"names":["Setting","SignupSchema","yup","shape","required","oneOf","useForm","resolver","yupResolver","register","errors","handleSubmit","trigger","onSubmit","sm","label","htmlFor","name","innerRef","className","classnames","Ripple","type","color","outline","InputPasswordToggle","props","hideIcon","showIcon","visible","placeholder","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","for","id","addonType","onClick","size","renderIcon","defaultProps"],"mappings":"gHAAA,+IAsFeA,UA9EC,WAEZ,IAAMC,EAAeC,MAAaC,MAAM,CACpC,eAAgBD,MAAaE,WAC7B,eAAgBF,MAAaE,WAC7B,sBAAuBF,MAElBE,WACAC,MAAM,CAACH,IAAA,gBAAyB,MAAO,0BAGhD,EAAoDI,YAAQ,CACxDC,SAAUC,sBAAYP,KADlBQ,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,aAAcC,EAAxC,EAAwCA,QAMxC,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAMC,SAAUF,GALX,kBAAMC,OAKX,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKE,GAAG,IAAR,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAM,eACNC,QAAQ,eACRC,KAAK,eACLC,SAAUT,EAAS,CAAEL,UAAU,IAC/Be,UAAWC,IAAW,oBAAqB,CACvC,aAAcV,EAAO,0BAMzC,eAAC,IAAD,WACI,cAAC,IAAD,CAAKI,GAAG,IAAR,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAM,eACNC,QAAQ,eACRC,KAAK,eACLC,SAAUT,EAAS,CAAEL,UAAU,IAC/Be,UAAWC,IAAW,oBAAqB,CACvC,aAAcV,EAAO,wBAKrC,cAAC,IAAD,CAAKI,GAAG,IAAR,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,MAAM,sBACNC,QAAQ,sBACRC,KAAK,sBACLC,SAAUT,EAAS,CAAEL,UAAU,IAC/Be,UAAWC,IAAW,oBAAqB,CACvC,aAAcV,EAAO,+BAKrC,eAAC,IAAD,CAAKS,UAAU,OAAOL,GAAG,KAAzB,UACI,cAAC,IAAOO,OAAR,CAAeC,KAAK,SAASH,UAAU,OAAOI,MAAM,UAApD,0BAGA,cAAC,IAAOF,OAAR,CAAeE,MAAM,YAAYC,SAAO,EAAxC,mC,gRClEtBC,EAAsB,SAAAC,GAE1B,IACEX,EAUEW,EAVFX,MACAY,EASED,EATFC,SACAC,EAQEF,EARFE,SACAC,EAOEH,EAPFG,QACAV,EAMEO,EANFP,UACAH,EAKEU,EALFV,QACAc,EAIEJ,EAJFI,YACAC,EAGEL,EAHFK,SACAC,EAEEN,EAFFM,eACGC,EAVL,YAWIP,EAXJ,GAcA,EAA8CQ,mBAASL,GAAvD,mBAAOM,EAAP,KAAwBC,EAAxB,KAaA,OACE,eAAC,WAAD,WACGrB,EAAQ,cAAC,IAAD,CAAOsB,IAAKrB,EAAZ,SAAsBD,IAAiB,KAChD,eAAC,IAAD,CACEI,UAAWC,IAAW,eACnBD,EAAYA,IAFjB,UAKE,cAAC,IAAD,yBACEG,MAA0B,IAApBa,EAA4B,WAAa,OAC/CL,YAAaA,GAA4B,mDACzCX,UAAWC,IAAW,eACnBY,EAAiBA,KAGfjB,GAASC,EACV,CACEsB,GAAItB,GAEN,IACAiB,IAGN,cAAC,IAAD,CAAiBM,UAAU,SAASC,QAAS,kBAAMJ,GAAoBD,IAAvE,SACE,cAAC,IAAD,CAAgBhB,UAAU,iBAA1B,SAlCW,WACjB,IAAMsB,EAAOV,GAAsB,GAEnC,OAAwB,IAApBI,EACKR,GAAsB,cAAC,IAAD,CAAKc,KAAMA,IAEjCb,GAAsB,cAAC,IAAD,CAAQa,KAAMA,IA4BKC,cAOvCjB,MA0BfA,EAAoBkB,aAAe,CACjCd,SAAS","file":"static/js/38.c05388b7.chunk.js","sourcesContent":["import React from 'react'\r\nimport * as yup from 'yup'\r\nimport classnames from 'classnames'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { Form, FormGroup, Row, Col, Button, Card, CardBody } from 'reactstrap'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\nconst Setting = () => {\r\n\r\n    const SignupSchema = yup.object().shape({\r\n        'old-password': yup.string().required(),\r\n        'new-password': yup.string().required(),\r\n        'retype-new-password': yup\r\n            .string()\r\n            .required()\r\n            .oneOf([yup.ref(`new-password`), null], 'Passwords must match')\r\n    })\r\n\r\n    const { register, errors, handleSubmit, trigger } = useForm({\r\n        resolver: yupResolver(SignupSchema)\r\n    })\r\n\r\n    const onSubmit = () => trigger()\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Row>\r\n                        <Col sm='6'>\r\n                            <FormGroup>\r\n                                <InputPasswordToggle\r\n                                    label='Old Password'\r\n                                    htmlFor='old-password'\r\n                                    name='old-password'\r\n                                    innerRef={register({ required: true })}\r\n                                    className={classnames('input-group-merge', {\r\n                                        'is-invalid': errors['old-password']\r\n                                    })}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm='6'>\r\n                            <FormGroup>\r\n                                <InputPasswordToggle\r\n                                    label='New Password'\r\n                                    htmlFor='new-password'\r\n                                    name='new-password'\r\n                                    innerRef={register({ required: true })}\r\n                                    className={classnames('input-group-merge', {\r\n                                        'is-invalid': errors['new-password']\r\n                                    })}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm='6'>\r\n                            <FormGroup>\r\n                                <InputPasswordToggle\r\n                                    label='Retype New Password'\r\n                                    htmlFor='retype-new-password'\r\n                                    name='retype-new-password'\r\n                                    innerRef={register({ required: true })}\r\n                                    className={classnames('input-group-merge', {\r\n                                        'is-invalid': errors['retype-new-password']\r\n                                    })}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col className='mt-1' sm='12'>\r\n                            <Button.Ripple type='submit' className='mr-1' color='primary'>\r\n                                Save changes\r\n                            </Button.Ripple>\r\n                            <Button.Ripple color='secondary' outline>\r\n                                Cancel\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Setting","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}