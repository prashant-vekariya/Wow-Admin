{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/reactstrap/es/Label.js","../node_modules/reactstrap/es/Input.js","../node_modules/reactstrap/es/Form.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","onBlur","onChange","meta","invalid","props","as","render","rest","componentProps","React.cloneElement","React.createElement","stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","order","offset","propTypes","children","node","hidden","check","for","tag","tagPropType","className","cssModule","xs","sm","md","lg","xl","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Label","Tag","htmlFor","_objectWithoutPropertiesLoose","colClasses","columnProp","colClass","_classNames","colSizeInterfix","mapToCssModules","classNames","classes","React","createElement","_extends","bsSize","valid","innerRef","func","plaintext","addon","Input","_React$Component","_this","this","getRef","_assertThisInitialized","_inheritsLoose","_proto","prototype","_this$props","checkInput","isNotaNumber","formControlClass","warnOnce","Component","inline","Form","_Component","submit"],"mappings":"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","file":"static/js/1.bc408b0a.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\n/* eslint react/prefer-stateless-function: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, warnOnce, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  bsSize: PropTypes.string,\n  valid: PropTypes.bool,\n  invalid: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  type: 'text'\n};\n\nvar Input = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.focus = function focus() {\n    if (this.ref) {\n      this.ref.focus();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        type = _this$props.type,\n        bsSize = _this$props.bsSize,\n        valid = _this$props.valid,\n        invalid = _this$props.invalid,\n        tag = _this$props.tag,\n        addon = _this$props.addon,\n        plaintext = _this$props.plaintext,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"type\", \"bsSize\", \"valid\", \"invalid\", \"tag\", \"addon\", \"plaintext\", \"innerRef\"]);\n\n    var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n    var isNotaNumber = new RegExp('\\\\D', 'g');\n    var fileInput = type === 'file';\n    var textareaInput = type === 'textarea';\n    var selectInput = type === 'select';\n    var rangeInput = type === 'range';\n    var Tag = tag || (selectInput || textareaInput ? type : 'input');\n    var formControlClass = 'form-control';\n\n    if (plaintext) {\n      formControlClass = formControlClass + \"-plaintext\";\n      Tag = tag || 'input';\n    } else if (fileInput) {\n      formControlClass = formControlClass + \"-file\";\n    } else if (rangeInput) {\n      formControlClass = formControlClass + \"-range\";\n    } else if (checkInput) {\n      if (addon) {\n        formControlClass = null;\n      } else {\n        formControlClass = 'form-check-input';\n      }\n    }\n\n    if (attributes.size && isNotaNumber.test(attributes.size)) {\n      warnOnce('Please use the prop \"bsSize\" instead of the \"size\" to bootstrap\\'s input sizing.');\n      bsSize = attributes.size;\n      delete attributes.size;\n    }\n\n    var classes = mapToCssModules(classNames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\" + bsSize : false, formControlClass), cssModule);\n\n    if (Tag === 'input' || tag && typeof tag === 'function') {\n      attributes.type = type;\n    }\n\n    if (attributes.children && !(plaintext || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {\n      warnOnce(\"Input with a type of \\\"\" + type + \"\\\" cannot have children. Please use \\\"value\\\"/\\\"defaultValue\\\" instead.\");\n      delete attributes.children;\n    }\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes,\n      \"aria-invalid\": invalid\n    }));\n  };\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;"],"sourceRoot":""}